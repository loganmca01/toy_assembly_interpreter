import SystemInfo
import AstInterface
import re

def parse_system_info(file):

    global memory_size
    global num_regs
    global pc_loc
    global num_instructions

    parse_header(file, "SYSTEM\n")

    parse_body(file, "register-count: ", 16)

    num = read_int(file)
    num_regs = num

    parse_body(file, "register-names: ", 16)
    add_registers(file)

    parse_body(file, "program-counter-location: ", 26)

    num = read_int(file)
    pc_loc = num

    parse_body(file, "number-of-instructions: ", 24)
    num = read_int(file)
    num_instructions = num

    file.readline()


def parse_instructions(file):
    
    global num_instructions

    for i in range(1, 17):
        parse_instruction(file, i)


def parse_instruction(file, num):
    global instructions
    global regs

    parse_header(file, "COMMAND-NO " + str(num) + "\n")
    parse_body(file, "command-name: ", 14)

    name = file.readline().split("\n")[0]
    parse_body(file, "command-arguments: ", 19)
    args = parse_args(file)

    #print(args[0].name + " " + str(args[0].symtype))

    current = file.readline()
    asts = []

    while current != "\n":
        tmp = re.findall("\[.*?\]", current)
        i = AstInterface.Iterator(0)
        asts.append(parse_ast(tmp, i))
        current = file.readline()

def parse_args(file):
    line = file.readline()
    tmp = re.findall("\[.*?\]", line)
    args = []
    for x in tmp:
        text = x.split(" ")
        args.append(AstInterface.Symbol(text[1][:-1], 0, int(text[0][1:])))
    return args


def parse_ast(arr, i):
    current = arr[i.val][1:-1]

    current = current.split(" ")

    if current[0] = "=":
        


def parse_header(file, string):
    text = file.readline()
    if text != string:
        print("error: please only use .isa files generated by isa_interpreter program")
        quit()


def parse_body(file, string, size):
    text = file.read(size)
    if text != string:
        print("error: please only use .isa files generated by isa_interpreter program")
        quit()


def add_registers(file):

    s = file.readline()
    text = s.split("\n")

    reg_names = text[0].split(" ")

    global regs
    regs = []

    for reg in reg_names:
        if reg != "":
            regs.append(AstInterface.Symbol(reg, 0, 0))


def read_int(file):

    text = file.readline()
    text.split("\n")
    return int(text)


def parse_all(filename):
    file = open(filename, "r")
    parse_system_info(file)
    global regs, pc_loc, num_regs

    parse_instructions(file)


parse_all("output.isa")