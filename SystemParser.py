import SystemInfo
import AstInterface
import re

def parse_system_info(file):

    parse_header(file, "SYSTEM\n")

    parse_body(file, "register-count: ", 16)

    num = read_int(file)
    SystemInfo.num_regs = num

    parse_body(file, "register-names: ", 16)
    add_registers(file)

    parse_body(file, "program-counter-location: ", 26)

    num = read_int(file)
    SystemInfo.pc_loc = num

    parse_body(file, "memory-size: ", 13)
    SystemInfo.memory_size = read_int(file)

    parse_body(file, "number-of-instructions: ", 24)
    num = read_int(file)
    SystemInfo.num_instructions = num

    file.readline()


def parse_instructions(file):
    
    SystemInfo.instructions = []

    for i in range(1, SystemInfo.num_instructions + 1):
        SystemInfo.instructions.append(parse_instruction(file, i))


def parse_instruction(file, num):

    parse_header(file, "COMMAND-NO " + str(num) + "\n")
    parse_body(file, "command-name: ", 14)

    name = file.readline().split("\n")[0]
    parse_body(file, "command-arguments: ", 19)
    args = parse_args(file)

    #print(args[0].name + " " + str(args[0].symtype))

    current = file.readline()
    asts = []

    while current != "\n" and current != "":
        tmp = re.findall("\[.*?\]", current)
        i = AstInterface.Iterator(0)
        asts.append(parse_ast(tmp, i, args))
        current = file.readline()

    return AstInterface.Instruction(name, args, asts)

def parse_args(file):
    line = file.readline()
    tmp = re.findall("\[.*?\]", line)
    args = []
    for x in tmp:
        text = x.split(" ")
        args.append(AstInterface.Symbol(text[1][:-1], 0, int(text[0][1:])))
    return args


def parse_ast(arr, i, args):

    current = arr[i.val][1:-1]

    current = current.split(" ")

    i.val += 1

    # recursive calls for each node type, always passing same iterator to track position in tree
    if current[0] == "=":
        node = AstInterface.Assign('=', None, None)
        node.left = parse_ast(arr, i, args)
        node.right = parse_ast(arr, i, args)
        return node
    elif current[0] == 'i':
        node = AstInterface.Flow('i', None, None)
        node.cond = parse_ast(arr, i, args)
        node.then = parse_ast(arr, i, args)
        return node
    elif current[0] == 'r':
        node = AstInterface.SymRef('r', None)
        for x in args:
            if x.name == current[1]:
                node.sym = x
                return node
        for y in SystemInfo.regs:
            if y.name == current[1]:
                node.sym = y
                return node
        print("error: unknown reference, please only use .isa files generated by isa_interpreter program")
        quit()
    elif current[0] == 'v':
        node = AstInterface.SymRef('v', None)
        for x in args:
            if x.name == current[1]:
                node.sym = x
                return node
        print("error: unknown reference, please only use .isa files generated by isa_interpreter program")
        quit()
    elif current[0] == 'm':
        node = AstInterface.MemRef('m', None)
        node.loc = parse_ast(arr, i, args)
        return node
    elif current[0] == '1' or current[0] == '2' or current[0] == '3' or current[0] == '4' or current[0] == '5':
        node = AstInterface.Cmp(current[0], None, None)
        node.left = parse_ast(arr, i, args)
        node.right = parse_ast(arr, i, args)
        return node
    elif current[0] == '+' or current[0] == '-' or current[0] == '*' or current[0] == '/':
        node = AstInterface.Arith(current[0], None, None)
        node.left = parse_ast(arr, i, args)
        node.right = parse_ast(arr, i, args)
        return node
    elif current[0] == 'n':
        node = AstInterface.Num('n', int(current[1]))
        return node
    else:
        print("error: unknown nodetype, please only use .isa files generated by isa_interpreter program")
        quit()


def parse_header(file, string):
    text = file.readline()
    if text != string:
        print("error: please only use .isa files generated by isa_interpreter program")
        quit()


def parse_body(file, string, size):
    text = file.read(size)
    if text != string:
        print("error: please only use .isa files generated by isa_interpreter program")
        quit()


def add_registers(file):

    s = file.readline()
    text = s.split("\n")

    reg_names = text[0].split(" ")

    SystemInfo.regs = []

    for reg in reg_names:
        if reg != "":
            SystemInfo.regs.append(AstInterface.Symbol(reg, 0, 1))


def read_int(file):

    text = file.readline()
    text.split("\n")
    return int(text)


def parse_all(filename):
    file = open(filename, "r")
    parse_system_info(file)

    parse_instructions(file)

    #for i in instructions:
        #print_instruction(i)

def print_instruction(instr):
    print(instr.name)
    for a in instr.args:
        print(a.name + " " + str(a.symtype))
    for x in instr.actions:
        x.print_tree()

#parse_all("output.isa")

#for i in instructions:
#    print_instruction(i)